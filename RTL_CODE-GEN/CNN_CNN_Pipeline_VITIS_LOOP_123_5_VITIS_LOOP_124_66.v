// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_VITIS_LOOP_123_5_VITIS_LOOP_124_66 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_val_4,
        line_buffer_1_1_address0,
        line_buffer_1_1_ce0,
        line_buffer_1_1_q0,
        max_val_6_out,
        max_val_6_out_ap_vld,
        grp_fu_11355_p_din0,
        grp_fu_11355_p_din1,
        grp_fu_11355_p_opcode,
        grp_fu_11355_p_dout0,
        grp_fu_11355_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] max_val_4;
output  [4:0] line_buffer_1_1_address0;
output   line_buffer_1_1_ce0;
input  [63:0] line_buffer_1_1_q0;
output  [63:0] max_val_6_out;
output   max_val_6_out_ap_vld;
output  [63:0] grp_fu_11355_p_din0;
output  [63:0] grp_fu_11355_p_din1;
output  [4:0] grp_fu_11355_p_opcode;
input  [0:0] grp_fu_11355_p_dout0;
output   grp_fu_11355_p_ce;

reg ap_idle;
reg line_buffer_1_1_ce0;
reg max_val_6_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln123_fu_115_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln123_reg_288;
reg   [63:0] max_val_load_1_reg_297;
reg   [63:0] line_buffer_1_1_load_reg_304;
wire   [63:0] zext_ln124_fu_144_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] max_val_fu_54;
wire   [63:0] max_val_2_fu_251_p3;
reg   [63:0] ap_sig_allocacmp_max_val_load_1;
wire    ap_loop_init;
reg   [1:0] b_fu_58;
wire   [1:0] add_ln124_fu_149_p2;
reg   [1:0] ap_sig_allocacmp_b_load;
reg   [2:0] indvar_flatten1200_fu_62;
wire   [2:0] add_ln123_fu_121_p2;
reg   [2:0] ap_sig_allocacmp_indvar_flatten1200_load;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln124_fu_130_p2;
wire   [1:0] select_ln122_fu_136_p3;
wire   [63:0] bitcast_ln126_fu_169_p1;
wire   [63:0] bitcast_ln126_1_fu_186_p1;
wire   [10:0] tmp_29_fu_172_p4;
wire   [51:0] trunc_ln126_fu_182_p1;
wire   [0:0] icmp_ln126_1_fu_209_p2;
wire   [0:0] icmp_ln126_fu_203_p2;
wire   [10:0] tmp_30_fu_189_p4;
wire   [51:0] trunc_ln126_1_fu_199_p1;
wire   [0:0] icmp_ln126_3_fu_227_p2;
wire   [0:0] icmp_ln126_2_fu_221_p2;
wire   [0:0] or_ln126_fu_215_p2;
wire   [0:0] or_ln126_1_fu_233_p2;
wire   [0:0] and_ln126_fu_239_p2;
wire   [0:0] and_ln126_1_fu_245_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln123_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            b_fu_58 <= add_ln124_fu_149_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            b_fu_58 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln123_fu_115_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten1200_fu_62 <= add_ln123_fu_121_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten1200_fu_62 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            max_val_fu_54 <= max_val_4;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            max_val_fu_54 <= max_val_2_fu_251_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln123_reg_288 <= icmp_ln123_fu_115_p2;
        line_buffer_1_1_load_reg_304 <= line_buffer_1_1_q0;
        max_val_load_1_reg_297 <= ap_sig_allocacmp_max_val_load_1;
    end
end

always @ (*) begin
    if (((icmp_ln123_fu_115_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_b_load = 2'd0;
    end else begin
        ap_sig_allocacmp_b_load = b_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten1200_load = 3'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1200_load = indvar_flatten1200_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_max_val_load_1 = max_val_2_fu_251_p3;
    end else begin
        ap_sig_allocacmp_max_val_load_1 = max_val_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        line_buffer_1_1_ce0 = 1'b1;
    end else begin
        line_buffer_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln123_reg_288 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_val_6_out_ap_vld = 1'b1;
    end else begin
        max_val_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln123_fu_121_p2 = (ap_sig_allocacmp_indvar_flatten1200_load + 3'd1);

assign add_ln124_fu_149_p2 = (select_ln122_fu_136_p3 + 2'd1);

assign and_ln126_1_fu_245_p2 = (grp_fu_11355_p_dout0 & and_ln126_fu_239_p2);

assign and_ln126_fu_239_p2 = (or_ln126_fu_215_p2 & or_ln126_1_fu_233_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln126_1_fu_186_p1 = max_val_load_1_reg_297;

assign bitcast_ln126_fu_169_p1 = line_buffer_1_1_load_reg_304;

assign grp_fu_11355_p_ce = 1'b1;

assign grp_fu_11355_p_din0 = line_buffer_1_1_q0;

assign grp_fu_11355_p_din1 = ap_sig_allocacmp_max_val_load_1;

assign grp_fu_11355_p_opcode = 5'd2;

assign icmp_ln123_fu_115_p2 = ((ap_sig_allocacmp_indvar_flatten1200_load == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_130_p2 = ((ap_sig_allocacmp_b_load == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln126_1_fu_209_p2 = ((trunc_ln126_fu_182_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln126_2_fu_221_p2 = ((tmp_30_fu_189_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln126_3_fu_227_p2 = ((trunc_ln126_1_fu_199_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln126_fu_203_p2 = ((tmp_29_fu_172_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign line_buffer_1_1_address0 = zext_ln124_fu_144_p1;

assign max_val_2_fu_251_p3 = ((and_ln126_1_fu_245_p2[0:0] == 1'b1) ? line_buffer_1_1_load_reg_304 : max_val_load_1_reg_297);

assign max_val_6_out = max_val_fu_54;

assign or_ln126_1_fu_233_p2 = (icmp_ln126_3_fu_227_p2 | icmp_ln126_2_fu_221_p2);

assign or_ln126_fu_215_p2 = (icmp_ln126_fu_203_p2 | icmp_ln126_1_fu_209_p2);

assign select_ln122_fu_136_p3 = ((icmp_ln124_fu_130_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_b_load);

assign tmp_29_fu_172_p4 = {{bitcast_ln126_fu_169_p1[62:52]}};

assign tmp_30_fu_189_p4 = {{bitcast_ln126_1_fu_186_p1[62:52]}};

assign trunc_ln126_1_fu_199_p1 = bitcast_ln126_1_fu_186_p1[51:0];

assign trunc_ln126_fu_182_p1 = bitcast_ln126_fu_169_p1[51:0];

assign zext_ln124_fu_144_p1 = select_ln122_fu_136_p3;

endmodule //CNN_CNN_Pipeline_VITIS_LOOP_123_5_VITIS_LOOP_124_66
