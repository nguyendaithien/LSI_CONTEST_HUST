// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_VITIS_LOOP_56_5_VITIS_LOOP_57_627 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        window_buffer_5_address0,
        window_buffer_5_ce0,
        window_buffer_5_we0,
        window_buffer_5_d0,
        line_buffer_15_load_1,
        line_buffer_16_load_2,
        line_buffer_17_load_2,
        line_buffer_15_load,
        line_buffer_16_load_1,
        line_buffer_17_load_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] window_buffer_5_address0;
output   window_buffer_5_ce0;
output   window_buffer_5_we0;
output  [63:0] window_buffer_5_d0;
input  [63:0] line_buffer_15_load_1;
input  [63:0] line_buffer_16_load_2;
input  [63:0] line_buffer_17_load_2;
input  [63:0] line_buffer_15_load;
input  [63:0] line_buffer_16_load_1;
input  [63:0] line_buffer_17_load_1;

reg ap_idle;
reg window_buffer_5_ce0;
reg window_buffer_5_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln56_fu_150_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [63:0] ap_phi_mux_cond47_i66_phi_fu_122_p6;
wire   [63:0] tmp_17_fu_229_p5;
wire   [63:0] ap_phi_reg_pp0_iter0_cond47_i66_reg_119;
wire   [1:0] select_ln56_fu_180_p3;
wire   [63:0] tmp_16_fu_242_p5;
wire   [63:0] zext_ln59_4_fu_224_p1;
reg   [1:0] col_fu_58;
wire   [1:0] add_ln57_fu_255_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_col_load;
reg   [1:0] row_fu_62;
wire   [1:0] select_ln56_2_fu_188_p3;
reg   [1:0] ap_sig_allocacmp_row_load;
reg   [3:0] indvar_flatten1979_fu_66;
wire   [3:0] add_ln56_fu_156_p2;
reg   [3:0] ap_sig_allocacmp_indvar_flatten1979_load;
wire   [0:0] icmp_ln57_fu_174_p2;
wire   [1:0] add_ln56_2_fu_168_p2;
wire   [3:0] tmp_s_fu_200_p3;
wire   [3:0] zext_ln59_fu_196_p1;
wire   [3:0] sub_ln59_fu_208_p2;
wire   [3:0] zext_ln59_3_fu_214_p1;
wire   [3:0] add_ln59_fu_218_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

CNN_mux_32_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_32_64_1_1_U221(
    .din0(line_buffer_15_load_1),
    .din1(line_buffer_16_load_2),
    .din2(line_buffer_17_load_2),
    .din3(select_ln56_2_fu_188_p3),
    .dout(tmp_17_fu_229_p5)
);

CNN_mux_32_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_32_64_1_1_U222(
    .din0(line_buffer_15_load),
    .din1(line_buffer_16_load_1),
    .din2(line_buffer_17_load_1),
    .din3(select_ln56_2_fu_188_p3),
    .dout(tmp_16_fu_242_p5)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln56_fu_150_p2 == 1'd0)) begin
            col_fu_58 <= add_ln57_fu_255_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            col_fu_58 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln56_fu_150_p2 == 1'd0)) begin
            indvar_flatten1979_fu_66 <= add_ln56_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten1979_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln56_fu_150_p2 == 1'd0)) begin
            row_fu_62 <= select_ln56_2_fu_188_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            row_fu_62 <= 2'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln56_fu_150_p2 == 1'd0)) begin
        if ((~(select_ln56_fu_180_p3 == 2'd2) & ~(select_ln56_fu_180_p3 == 2'd1))) begin
            ap_phi_mux_cond47_i66_phi_fu_122_p6 = 64'd0;
        end else if ((select_ln56_fu_180_p3 == 2'd2)) begin
            ap_phi_mux_cond47_i66_phi_fu_122_p6 = tmp_16_fu_242_p5;
        end else if ((select_ln56_fu_180_p3 == 2'd1)) begin
            ap_phi_mux_cond47_i66_phi_fu_122_p6 = tmp_17_fu_229_p5;
        end else begin
            ap_phi_mux_cond47_i66_phi_fu_122_p6 = ap_phi_reg_pp0_iter0_cond47_i66_reg_119;
        end
    end else begin
        ap_phi_mux_cond47_i66_phi_fu_122_p6 = ap_phi_reg_pp0_iter0_cond47_i66_reg_119;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_col_load = 2'd0;
    end else begin
        ap_sig_allocacmp_col_load = col_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten1979_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten1979_load = indvar_flatten1979_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_row_load = 2'd0;
    end else begin
        ap_sig_allocacmp_row_load = row_fu_62;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        window_buffer_5_ce0 = 1'b1;
    end else begin
        window_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln56_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        window_buffer_5_we0 = 1'b1;
    end else begin
        window_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln56_2_fu_168_p2 = (ap_sig_allocacmp_row_load + 2'd1);

assign add_ln56_fu_156_p2 = (ap_sig_allocacmp_indvar_flatten1979_load + 4'd1);

assign add_ln57_fu_255_p2 = (select_ln56_fu_180_p3 + 2'd1);

assign add_ln59_fu_218_p2 = (sub_ln59_fu_208_p2 + zext_ln59_3_fu_214_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_cond47_i66_reg_119 = 'bx;

assign icmp_ln56_fu_150_p2 = ((ap_sig_allocacmp_indvar_flatten1979_load == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_174_p2 = ((ap_sig_allocacmp_col_load == 2'd3) ? 1'b1 : 1'b0);

assign select_ln56_2_fu_188_p3 = ((icmp_ln57_fu_174_p2[0:0] == 1'b1) ? add_ln56_2_fu_168_p2 : ap_sig_allocacmp_row_load);

assign select_ln56_fu_180_p3 = ((icmp_ln57_fu_174_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_col_load);

assign sub_ln59_fu_208_p2 = (tmp_s_fu_200_p3 - zext_ln59_fu_196_p1);

assign tmp_s_fu_200_p3 = {{select_ln56_2_fu_188_p3}, {2'd0}};

assign window_buffer_5_address0 = zext_ln59_4_fu_224_p1;

assign window_buffer_5_d0 = ap_phi_mux_cond47_i66_phi_fu_122_p6;

assign zext_ln59_3_fu_214_p1 = select_ln56_fu_180_p3;

assign zext_ln59_4_fu_224_p1 = add_ln59_fu_218_p2;

assign zext_ln59_fu_196_p1 = select_ln56_2_fu_188_p3;

endmodule //CNN_CNN_Pipeline_VITIS_LOOP_56_5_VITIS_LOOP_57_627
