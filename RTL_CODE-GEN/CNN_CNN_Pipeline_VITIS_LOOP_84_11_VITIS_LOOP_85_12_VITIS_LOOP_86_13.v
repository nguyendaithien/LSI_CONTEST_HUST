// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_VITIS_LOOP_84_11_VITIS_LOOP_85_12_VITIS_LOOP_86_13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        output_conv1,
        grp_fu_2854_p_din0,
        grp_fu_2854_p_din1,
        grp_fu_2854_p_opcode,
        grp_fu_2854_p_dout0,
        grp_fu_2854_p_ce,
        grp_fu_11355_p_din0,
        grp_fu_11355_p_din1,
        grp_fu_11355_p_opcode,
        grp_fu_11355_p_dout0,
        grp_fu_11355_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [63:0] m_axi_gmem_WDATA;
output  [7:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [63:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] output_conv1;
output  [63:0] grp_fu_2854_p_din0;
output  [63:0] grp_fu_2854_p_din1;
output  [1:0] grp_fu_2854_p_opcode;
input  [63:0] grp_fu_2854_p_dout0;
output   grp_fu_2854_p_ce;
output  [63:0] grp_fu_11355_p_din0;
output  [63:0] grp_fu_11355_p_din1;
output  [4:0] grp_fu_11355_p_opcode;
input  [0:0] grp_fu_11355_p_dout0;
output   grp_fu_11355_p_ce;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
reg    ap_block_state24_pp0_stage0_iter23;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln84_fu_211_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] bias_conv1_address0;
reg    bias_conv1_ce0;
wire   [63:0] bias_conv1_q0;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
reg    gmem_blk_n_AW;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln84_reg_615;
reg   [0:0] icmp_ln84_reg_615_pp0_iter1_reg;
reg   [0:0] icmp_ln84_reg_615_pp0_iter2_reg;
wire   [0:0] icmp_ln85_fu_232_p2;
reg   [0:0] icmp_ln85_reg_619;
reg   [0:0] icmp_ln85_reg_619_pp0_iter1_reg;
reg   [0:0] icmp_ln85_reg_619_pp0_iter2_reg;
wire   [4:0] select_ln84_2_fu_242_p3;
reg   [4:0] select_ln84_2_reg_633;
reg   [4:0] select_ln84_2_reg_633_pp0_iter1_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter2_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter3_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter4_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter5_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter6_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter7_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter8_reg;
reg   [4:0] select_ln84_2_reg_633_pp0_iter9_reg;
reg   [60:0] trunc_ln_reg_638;
reg   [63:0] gmem_addr_reg_643;
reg   [63:0] gmem_addr_reg_643_pp0_iter5_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter6_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter7_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter8_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter9_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter10_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter11_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter12_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter13_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter14_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter15_reg;
reg   [63:0] gmem_addr_reg_643_pp0_iter16_reg;
reg   [63:0] bias_conv1_load_reg_655;
reg   [63:0] gmem_addr_read_reg_660;
wire   [63:0] bitcast_ln89_fu_501_p1;
reg   [63:0] a_assign_reg_670;
reg   [63:0] a_assign_reg_670_pp0_iter16_reg;
wire   [63:0] select_ln89_fu_546_p3;
reg   [63:0] select_ln89_reg_676;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] zext_ln84_2_fu_497_p1;
wire  signed [63:0] sext_ln89_fu_487_p1;
reg    ap_block_pp0_stage0_01001;
reg   [4:0] j_fu_106;
wire   [4:0] add_ln86_fu_471_p2;
wire    ap_loop_init;
reg   [4:0] i_1_fu_110;
wire   [4:0] select_ln85_2_fu_426_p3;
reg   [9:0] indvar_flatten953_fu_114;
wire   [9:0] select_ln85_3_fu_256_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten953_load;
reg   [4:0] num_ker_1_fu_118;
reg   [4:0] ap_sig_allocacmp_num_ker;
reg   [13:0] indvar_flatten987_fu_122;
wire   [13:0] add_ln84_4_fu_217_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten987_load;
wire   [4:0] add_ln84_fu_226_p2;
wire   [9:0] add_ln85_4_fu_250_p2;
wire   [9:0] p_shl8_fu_282_p3;
wire   [6:0] p_shl9_fu_294_p3;
wire   [10:0] p_shl8_cast_fu_290_p1;
wire   [10:0] p_shl9_cast_fu_302_p1;
wire   [10:0] empty_215_fu_306_p2;
wire  signed [14:0] p_cast_fu_312_p1;
wire   [14:0] add_ln88_fu_316_p1;
wire  signed [14:0] grp_fu_554_p2;
wire   [14:0] select_ln84_1_fu_331_p1;
wire  signed [14:0] grp_fu_562_p2;
wire   [14:0] select_ln84_1_fu_331_p2;
wire   [14:0] select_ln84_3_fu_336_p1;
(* use_dsp48 = "no" *) wire   [14:0] add_ln88_fu_316_p2;
wire   [0:0] icmp_ln86_fu_347_p2;
wire   [0:0] xor_ln84_fu_342_p2;
wire   [4:0] select_ln84_fu_324_p3;
wire   [0:0] and_ln84_fu_353_p2;
wire   [0:0] or_ln85_fu_365_p2;
wire   [4:0] add_ln85_fu_359_p2;
wire   [9:0] p_shl8_mid1_fu_378_p3;
wire   [6:0] p_shl9_mid1_fu_390_p3;
wire   [10:0] p_shl8_cast_mid1_fu_386_p1;
wire   [10:0] p_shl9_cast_mid1_fu_398_p1;
wire   [10:0] p_mid1951_fu_402_p2;
wire  signed [14:0] p_cast_mid1_fu_408_p1;
wire   [14:0] select_ln84_1_fu_331_p3;
wire   [14:0] add_ln88_3_fu_412_p2;
wire   [14:0] select_ln84_3_fu_336_p3;
wire   [4:0] select_ln85_fu_370_p3;
wire   [14:0] select_ln85_1_fu_418_p3;
wire   [14:0] zext_ln89_fu_434_p1;
wire   [14:0] add_ln89_3_fu_438_p2;
wire   [17:0] tmp_s_fu_444_p3;
wire  signed [63:0] sext_ln89_3_fu_452_p1;
wire   [63:0] add_ln89_fu_456_p2;
wire   [63:0] bitcast_ln18_fu_505_p1;
wire   [10:0] tmp_15_fu_508_p4;
wire   [51:0] trunc_ln18_fu_518_p1;
wire   [0:0] icmp_ln18_1_fu_528_p2;
wire   [0:0] icmp_ln18_fu_522_p2;
wire   [0:0] or_ln18_fu_534_p2;
wire   [0:0] and_ln18_fu_540_p2;
wire   [4:0] grp_fu_554_p0;
wire   [9:0] grp_fu_554_p1;
wire   [4:0] grp_fu_562_p0;
wire   [9:0] grp_fu_562_p1;
reg    grp_fu_167_ce;
reg    grp_fu_171_ce;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_554_ce;
reg    grp_fu_562_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [14:0] grp_fu_554_p00;
wire   [14:0] grp_fu_562_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_done_reg = 1'b0;
end

CNN_CNN_Pipeline_VITIS_LOOP_84_11_VITIS_LOOP_85_12_VITIS_LOOP_86_13_bias_conv1_RObkb #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bias_conv1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_conv1_address0),
    .ce0(bias_conv1_ce0),
    .q0(bias_conv1_q0)
);

CNN_mul_mul_5ns_10ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
mul_mul_5ns_10ns_15_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_554_p0),
    .din1(grp_fu_554_p1),
    .ce(grp_fu_554_ce),
    .dout(grp_fu_554_p2)
);

CNN_mul_mul_5ns_10ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 15 ))
mul_mul_5ns_10ns_15_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_562_p0),
    .din1(grp_fu_562_p1),
    .ce(grp_fu_562_ce),
    .dout(grp_fu_562_p2)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter22_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_1_fu_110 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln84_reg_615_pp0_iter2_reg == 1'd0))) begin
            i_1_fu_110 <= select_ln85_2_fu_426_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln84_fu_211_p2 == 1'd0))) begin
            indvar_flatten953_fu_114 <= select_ln85_3_fu_256_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten953_fu_114 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln84_fu_211_p2 == 1'd0))) begin
            indvar_flatten987_fu_122 <= add_ln84_4_fu_217_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten987_fu_122 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_106 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln84_reg_615_pp0_iter2_reg == 1'd0))) begin
            j_fu_106 <= add_ln86_fu_471_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln84_fu_211_p2 == 1'd0))) begin
            num_ker_1_fu_118 <= select_ln84_2_fu_242_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            num_ker_1_fu_118 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_assign_reg_670 <= grp_fu_2854_p_dout0;
        a_assign_reg_670_pp0_iter16_reg <= a_assign_reg_670;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        bias_conv1_load_reg_655 <= bias_conv1_q0;
        gmem_addr_read_reg_660 <= m_axi_gmem_RDATA;
        gmem_addr_reg_643 <= sext_ln89_fu_487_p1;
        gmem_addr_reg_643_pp0_iter10_reg <= gmem_addr_reg_643_pp0_iter9_reg;
        gmem_addr_reg_643_pp0_iter11_reg <= gmem_addr_reg_643_pp0_iter10_reg;
        gmem_addr_reg_643_pp0_iter12_reg <= gmem_addr_reg_643_pp0_iter11_reg;
        gmem_addr_reg_643_pp0_iter13_reg <= gmem_addr_reg_643_pp0_iter12_reg;
        gmem_addr_reg_643_pp0_iter14_reg <= gmem_addr_reg_643_pp0_iter13_reg;
        gmem_addr_reg_643_pp0_iter15_reg <= gmem_addr_reg_643_pp0_iter14_reg;
        gmem_addr_reg_643_pp0_iter16_reg <= gmem_addr_reg_643_pp0_iter15_reg;
        gmem_addr_reg_643_pp0_iter5_reg <= gmem_addr_reg_643;
        gmem_addr_reg_643_pp0_iter6_reg <= gmem_addr_reg_643_pp0_iter5_reg;
        gmem_addr_reg_643_pp0_iter7_reg <= gmem_addr_reg_643_pp0_iter6_reg;
        gmem_addr_reg_643_pp0_iter8_reg <= gmem_addr_reg_643_pp0_iter7_reg;
        gmem_addr_reg_643_pp0_iter9_reg <= gmem_addr_reg_643_pp0_iter8_reg;
        icmp_ln84_reg_615_pp0_iter2_reg <= icmp_ln84_reg_615_pp0_iter1_reg;
        icmp_ln85_reg_619_pp0_iter2_reg <= icmp_ln85_reg_619_pp0_iter1_reg;
        select_ln84_2_reg_633_pp0_iter2_reg <= select_ln84_2_reg_633_pp0_iter1_reg;
        select_ln84_2_reg_633_pp0_iter3_reg <= select_ln84_2_reg_633_pp0_iter2_reg;
        select_ln84_2_reg_633_pp0_iter4_reg <= select_ln84_2_reg_633_pp0_iter3_reg;
        select_ln84_2_reg_633_pp0_iter5_reg <= select_ln84_2_reg_633_pp0_iter4_reg;
        select_ln84_2_reg_633_pp0_iter6_reg <= select_ln84_2_reg_633_pp0_iter5_reg;
        select_ln84_2_reg_633_pp0_iter7_reg <= select_ln84_2_reg_633_pp0_iter6_reg;
        select_ln84_2_reg_633_pp0_iter8_reg <= select_ln84_2_reg_633_pp0_iter7_reg;
        select_ln84_2_reg_633_pp0_iter9_reg <= select_ln84_2_reg_633_pp0_iter8_reg;
        select_ln89_reg_676 <= select_ln89_fu_546_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln84_reg_615 <= icmp_ln84_fu_211_p2;
        icmp_ln84_reg_615_pp0_iter1_reg <= icmp_ln84_reg_615;
        icmp_ln85_reg_619_pp0_iter1_reg <= icmp_ln85_reg_619;
        select_ln84_2_reg_633_pp0_iter1_reg <= select_ln84_2_reg_633;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln84_fu_211_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln85_reg_619 <= icmp_ln85_fu_232_p2;
        select_ln84_2_reg_633 <= select_ln84_2_fu_242_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_reg_615_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln_reg_638 <= {{add_ln89_fu_456_p2[63:3]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln84_fu_211_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln84_reg_615_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter22_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten953_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten953_load = indvar_flatten953_fu_114;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten987_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten987_load = indvar_flatten987_fu_122;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_num_ker = 5'd0;
    end else begin
        ap_sig_allocacmp_num_ker = num_ker_1_fu_118;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bias_conv1_ce0 = 1'b1;
    end else begin
        bias_conv1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_167_ce = 1'b1;
    end else begin
        grp_fu_167_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_171_ce = 1'b1;
    end else begin
        grp_fu_171_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_554_ce = 1'b1;
    end else begin
        grp_fu_554_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_562_ce = 1'b1;
    end else begin
        grp_fu_562_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln84_4_fu_217_p2 = (ap_sig_allocacmp_indvar_flatten987_load + 14'd1);

assign add_ln84_fu_226_p2 = (ap_sig_allocacmp_num_ker + 5'd1);

assign add_ln85_4_fu_250_p2 = (ap_sig_allocacmp_indvar_flatten953_load + 10'd1);

assign add_ln85_fu_359_p2 = (select_ln84_fu_324_p3 + 5'd1);

assign add_ln86_fu_471_p2 = (select_ln85_fu_370_p3 + 5'd1);

assign add_ln88_3_fu_412_p2 = ($signed(p_cast_mid1_fu_408_p1) + $signed(select_ln84_1_fu_331_p3));

assign add_ln88_fu_316_p1 = grp_fu_554_p2;

assign add_ln88_fu_316_p2 = ($signed(p_cast_fu_312_p1) + $signed(add_ln88_fu_316_p1));

assign add_ln89_3_fu_438_p2 = (select_ln85_1_fu_418_p3 + zext_ln89_fu_434_p1);

assign add_ln89_fu_456_p2 = ($signed(sext_ln89_3_fu_452_p1) + $signed(output_conv1));

assign and_ln18_fu_540_p2 = (or_ln18_fu_534_p2 & grp_fu_11355_p_dout0);

assign and_ln84_fu_353_p2 = (xor_ln84_fu_342_p2 & icmp_ln86_fu_347_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((ap_enable_reg_pp0_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_gmem_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (m_axi_gmem_AWREADY == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (m_axi_gmem_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter23 == 1'b1) & (m_axi_gmem_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter18 == 1'b1) & (m_axi_gmem_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter17 == 1'b1) & (m_axi_gmem_AWREADY == 1'b0)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (m_axi_gmem_RVALID == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (m_axi_gmem_ARREADY == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp0_stage0_iter23 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bias_conv1_address0 = zext_ln84_2_fu_497_p1;

assign bitcast_ln18_fu_505_p1 = a_assign_reg_670_pp0_iter16_reg;

assign bitcast_ln89_fu_501_p1 = gmem_addr_read_reg_660;

assign empty_215_fu_306_p2 = (p_shl8_cast_fu_290_p1 - p_shl9_cast_fu_302_p1);

assign grp_fu_11355_p_ce = grp_fu_171_ce;

assign grp_fu_11355_p_din0 = a_assign_reg_670;

assign grp_fu_11355_p_din1 = 64'd0;

assign grp_fu_11355_p_opcode = 5'd2;

assign grp_fu_2854_p_ce = grp_fu_167_ce;

assign grp_fu_2854_p_din0 = bias_conv1_load_reg_655;

assign grp_fu_2854_p_din1 = bitcast_ln89_fu_501_p1;

assign grp_fu_2854_p_opcode = 2'd0;

assign grp_fu_554_p0 = grp_fu_554_p00;

assign grp_fu_554_p00 = ap_sig_allocacmp_num_ker;

assign grp_fu_554_p1 = 15'd784;

assign grp_fu_562_p0 = grp_fu_562_p00;

assign grp_fu_562_p00 = add_ln84_fu_226_p2;

assign grp_fu_562_p1 = 15'd784;

assign icmp_ln18_1_fu_528_p2 = ((trunc_ln18_fu_518_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_522_p2 = ((tmp_15_fu_508_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_211_p2 = ((ap_sig_allocacmp_indvar_flatten987_load == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_232_p2 = ((ap_sig_allocacmp_indvar_flatten953_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_347_p2 = ((j_fu_106 == 5'd28) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = sext_ln89_fu_487_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_643_pp0_iter16_reg;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = select_ln89_reg_676;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 8'd255;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln18_fu_534_p2 = (icmp_ln18_fu_522_p2 | icmp_ln18_1_fu_528_p2);

assign or_ln85_fu_365_p2 = (icmp_ln85_reg_619_pp0_iter2_reg | and_ln84_fu_353_p2);

assign p_cast_fu_312_p1 = $signed(empty_215_fu_306_p2);

assign p_cast_mid1_fu_408_p1 = $signed(p_mid1951_fu_402_p2);

assign p_mid1951_fu_402_p2 = (p_shl8_cast_mid1_fu_386_p1 - p_shl9_cast_mid1_fu_398_p1);

assign p_shl8_cast_fu_290_p1 = p_shl8_fu_282_p3;

assign p_shl8_cast_mid1_fu_386_p1 = p_shl8_mid1_fu_378_p3;

assign p_shl8_fu_282_p3 = {{i_1_fu_110}, {5'd0}};

assign p_shl8_mid1_fu_378_p3 = {{add_ln85_fu_359_p2}, {5'd0}};

assign p_shl9_cast_fu_302_p1 = p_shl9_fu_294_p3;

assign p_shl9_cast_mid1_fu_398_p1 = p_shl9_mid1_fu_390_p3;

assign p_shl9_fu_294_p3 = {{i_1_fu_110}, {2'd0}};

assign p_shl9_mid1_fu_390_p3 = {{add_ln85_fu_359_p2}, {2'd0}};

assign select_ln84_1_fu_331_p1 = grp_fu_562_p2;

assign select_ln84_1_fu_331_p2 = grp_fu_554_p2;

assign select_ln84_1_fu_331_p3 = ((icmp_ln85_reg_619_pp0_iter2_reg[0:0] == 1'b1) ? select_ln84_1_fu_331_p1 : select_ln84_1_fu_331_p2);

assign select_ln84_2_fu_242_p3 = ((icmp_ln85_fu_232_p2[0:0] == 1'b1) ? add_ln84_fu_226_p2 : ap_sig_allocacmp_num_ker);

assign select_ln84_3_fu_336_p1 = grp_fu_562_p2;

assign select_ln84_3_fu_336_p3 = ((icmp_ln85_reg_619_pp0_iter2_reg[0:0] == 1'b1) ? select_ln84_3_fu_336_p1 : add_ln88_fu_316_p2);

assign select_ln84_fu_324_p3 = ((icmp_ln85_reg_619_pp0_iter2_reg[0:0] == 1'b1) ? 5'd0 : i_1_fu_110);

assign select_ln85_1_fu_418_p3 = ((and_ln84_fu_353_p2[0:0] == 1'b1) ? add_ln88_3_fu_412_p2 : select_ln84_3_fu_336_p3);

assign select_ln85_2_fu_426_p3 = ((and_ln84_fu_353_p2[0:0] == 1'b1) ? add_ln85_fu_359_p2 : select_ln84_fu_324_p3);

assign select_ln85_3_fu_256_p3 = ((icmp_ln85_fu_232_p2[0:0] == 1'b1) ? 10'd1 : add_ln85_4_fu_250_p2);

assign select_ln85_fu_370_p3 = ((or_ln85_fu_365_p2[0:0] == 1'b1) ? 5'd0 : j_fu_106);

assign select_ln89_fu_546_p3 = ((and_ln18_fu_540_p2[0:0] == 1'b1) ? bitcast_ln18_fu_505_p1 : 64'd0);

assign sext_ln89_3_fu_452_p1 = $signed(tmp_s_fu_444_p3);

assign sext_ln89_fu_487_p1 = $signed(trunc_ln_reg_638);

assign tmp_15_fu_508_p4 = {{bitcast_ln18_fu_505_p1[62:52]}};

assign tmp_s_fu_444_p3 = {{add_ln89_3_fu_438_p2}, {3'd0}};

assign trunc_ln18_fu_518_p1 = bitcast_ln18_fu_505_p1[51:0];

assign xor_ln84_fu_342_p2 = (icmp_ln85_reg_619_pp0_iter2_reg ^ 1'd1);

assign zext_ln84_2_fu_497_p1 = select_ln84_2_reg_633_pp0_iter9_reg;

assign zext_ln89_fu_434_p1 = select_ln85_fu_370_p3;

endmodule //CNN_CNN_Pipeline_VITIS_LOOP_84_11_VITIS_LOOP_85_12_VITIS_LOOP_86_13
